import tkinter as tk
from tkinter import Button, Entry, Label, OptionMenu, StringVar, PhotoImage
import threading
from time import sleep
import pygame
from PIL import Image, ImageTk
from datetime import datetime
import pytz


# Initialize pygame
pygame.mixer.init()

# Create main window
clock = tk.Tk()
clock.title("Talking Clock")
window_width = 1000
window_height = 700
clock.geometry(f"{window_width}x{window_height}")

# Load images
image = Image.open("tran.png")
image = ImageTk.PhotoImage(image)

alarm_image = Image.open("alarm_image.png")
alarm_image = ImageTk.PhotoImage(alarm_image)

alarm_background = Image.open("alarm_background.png")
alarm_background = ImageTk.PhotoImage(alarm_background)

countdown_image = Image.open("countdown.png")
countdown_image=ImageTk.PhotoImage(countdown_image)

# Timezones dictioNew_English_audiosry
timezones = {
    "东京": "Asia/Tokyo",
    "上海": "Asia/Shanghai",
    "纽约": "America/New_York",
    "阿姆斯特丹": "Europe/Amsterdam",
    "伦敦": "Europe/London",
}

# Translations dictioNew_English_audiosry
translations = {
    "中文": {
        "Shanghai": "上海",
        "New York": "纽约",
        "Tokyo": "东京",
        "Amsterdam": "阿姆斯特丹",
        "London": "伦敦",
    },
    "英文": {
        "上海": "Shanghai",
        "纽约": "New York",
        "东京": "Tokyo",
        "阿姆斯特丹": "Amsterdam",
        "伦敦": "London",
    },
}

current_timezone = "Europe/Amsterdam"  # Default timezone
current_language = "英文"  # Default language setting to English

# Function to update time


def update_time():
    tz = pytz.timezone(current_timezone)
    localized_time = datetime.now(tz)
    formatted_time = localized_time.strftime("%I:%M:%S %p")
    time_label.config(text=formatted_time)
    formatted_date = localized_time.strftime("%Y-%m-%d %A")
    date_label.config(text=formatted_date)
    time_label.after(1000, update_time)

# Function to change timezone


def change_timezone(city):
    global current_timezone
    current_timezone = timezones[city]
    update_time()
    update_background()

# Function to update background based on time


def update_background():
    tz = datetime.now(pytz.timezone(current_timezone))
    current_hour = int(tz.strftime('%H'))
    if 6 <= current_hour < 18:
        background_image.configure(image=daytime_image)
    else:
        background_image.configure(image=nighttime_image)
    clock.after(60000, update_background)


# Load daytime and nighttime images using PhotoImage
daytime_image = tk.PhotoImage(file="daytime.png")
nighttime_image = tk.PhotoImage(file="nighttime.png")

# Create a label to display the background image
background_image = tk.Label(clock)
background_image.grid(row=0, column=0, columnspan=len(timezones), rowspan=4)

update_background()

# Function to change language


def change_language():
    global current_language
    if current_language == "中文":
        current_language = "英文"
    else:
        current_language = "中文"
    update_language()

# Function to update language


def update_language():
    for button in buttons:
        translated_text = translations[current_language].get(
            button["text"], button["text"])
        button.config(text=translated_text)


# Common font and button size
common_font = ("Comic Sans MS", 12)
button_width = 15
button_height = 2
button_padding_x = 10
button_padding_y = 10

# Create timezone buttons with uniform size and spacing
buttons = []
for idx, city in enumerate(timezones):
    translated_city = translations[current_language].get(city, city)
    button = tk.Button(
        clock,
        text=translated_city,
        font=common_font,
        width=button_width,
        height=button_height,
        command=lambda c=city: change_timezone(c),
        bg="#BEBDBE",  # 设置背景颜色为灰色
        highlightbackground="SystemButtonFace"
    )
    button.grid(row=3, column=idx, padx=button_padding_x,
                pady=button_padding_y)
    buttons.append(button)

time_label = tk.Label(clock, text="", font=("Comic Sans MS", 72), bg="#BEBDBE",  # 设置背景颜色为灰色
                      highlightbackground="SystemButtonFace", width=11, height=1)

time_label.grid(row=1, column=0, columnspan=len(timezones), pady=20)
date_label = tk.Label(clock, text="", font=("Comic Sans MS", 25), bg="#BEBDBE",  # 设置背景颜色为灰色
                      highlightbackground="SystemButtonFace", width=18, height=1)
date_label.grid(row=2, column=0, columnspan=len(timezones))


# Create a button to switch the language with a uniform size
language_button = tk.Button(clock, image=image, command=change_language)
language_button.grid(row=0, column=0)

# Update time
update_time()


def speak_chinese():
    # 获取当前时间
    tz = pytz.timezone(current_timezone)
    current_time = datetime.now(tz)
    hour = current_time.hour
    minute = current_time.minute

    # 转换小时为12小时制
    if hour == 0:
        hour_str = "12"
        am_pm = "AM"
    elif hour < 12:
        hour_str = str(hour)
        am_pm = "AM"
    elif hour == 12:
        hour_str = "12"
        am_pm = "PM"
    else:
        hour_str = str(hour - 12)
        am_pm = "PM"

    # 生成报时文本
    time_text = f"现在是 {am_pm}{hour_str}点{minute}"

    # 播放报时
    pygame.init()
    pygame.mixer.init()

    # 播放 it's
    pygame.mixer.music.load(f"chinese_audio/its.mp3")
    pygame.mixer.music.play()
    pygame.time.delay(1000)  # 等待1秒，以确保it's音频播放完成

    # 播放 AM/PM
    am_pm_audio = pygame.mixer.Sound(f"chinese_audio/{am_pm}.mp3")
    am_pm_audio.play()
    pygame.time.delay(1000)  # 等待1秒，以确保AM/PM音频播放完成

    # 播放 hour
    hour_audio = pygame.mixer.Sound(f"chinese_audio/hour-{hour}.mp3")
    hour_audio.play()
    pygame.time.delay(1000)  # 等待1秒，以确保hour音频播放完成

    # 播放 dian
    dian_audio = pygame.mixer.Sound(f"chinese_audio/dian.mp3")
    dian_audio.play()
    pygame.time.delay(1000)  # 等待1秒，以确保dian音频播放完成

    # 播放 minute
    minute_audio = pygame.mixer.Sound(f"chinese_audio/min-{minute}.mp3")
    minute_audio.play()
    pygame.time.delay(1000)  # 等待1秒，以确保minute音频播放完成

    pygame.quit()


def speak_english():
    # 获取当前时间
    tz = pytz.timezone(current_timezone)
    localized_time = datetime.now(tz)
    current_time = localized_time.strftime("%I:%M:%S %p")
    hour = int(localized_time.strftime("%I"))
    minute = int(localized_time.strftime("%M"))
    
    
    # 播放报时
    pygame.init()
    pygame.mixer.init()

    pygame.mixer.music.load("New_English_audios/it_s.wav")
    pygame.mixer.music.play()
    pygame.time.delay(650)  # 等待1秒，以确保it's音频播放完成
    #是否是整点
    if minute == 0:
        hour_audio = pygame.mixer.Sound(f"New_English_audios/{hour}.wav")
        hour_audio.play()
        pygame.time.delay(1100) 
        pygame.mixer.music.load("New_English_audios/o_clock.wav")
        pygame.mixer.music.play()
    #是否是15分
    if minute == 15:
        pygame.mixer.music.load("New_English_audios/a_quarter_past.wav")
        pygame.mixer.music.play()
        pygame.time.delay(1500)
        hour_audio=pygame.mixer.Sound(f"New_English_audios/{hour}.wav")
        hour_audio.play()
    #是否是半点
    if minute == 30:
        pygame.mixer.music.load("New_English_audios/a_half_past.wav")
        pygame.mixer.music.play()
        pygame.time.delay(1300)
        hour_audio=pygame.mixer.Sound(f"New_English_audios/{hour}.wav")
        hour_audio.play()
    #是否是45分
    if minute == 45:
        pygame.mixer.music.load("New_English_audios/a_quarter_to.wav")
        pygame.mixer.music.play()
        pygame.time.delay(1500)
        hour_audio=pygame.mixer.Sound(f"New_English_audios/{hour+1}.wav")
        hour_audio.play()
    #是否在30以内
    if minute < 30:
        minute_audio = pygame.mixer.Sound(f"New_English_audios/{minute}.wav")
        minute_audio.play()
        pygame.time.delay(1200) 
        pygame.mixer.music.load("New_English_audios/minutes_past.wav")
        pygame.mixer.music.play()
        pygame.time.delay(1100)
        hour_audio=pygame.mixer.Sound(f"New_English_audios/{hour}.wav")
        hour_audio.play()
    else:
        to_min = 60-int(minute)
        minute_audio = pygame.mixer.Sound(f"New_English_audios/{to_min}.wav")
        minute_audio.play()
        pygame.time.delay(1200) 
        pygame.mixer.music.load("New_English_audios/minutes_to.wav")
        pygame.mixer.music.play()
        pygame.time.delay(1100)
        hour_audio=pygame.mixer.Sound(f"New_English_audios/{hour+1}.wav")
        hour_audio.play()
  
    # 等待所有声音播放完成
    pygame.time.wait(2000)

    pygame.quit()



# Create speak time buttons with uniform size
chspeak_time_button = tk.Button(
    clock, text="现在几点了？", font=common_font, command=speak_chinese, width=button_width, height=button_height,
    bg="#BEBDBE",  # 设置背景颜色为灰色
    highlightbackground="SystemButtonFace"
)
chspeak_time_button.grid(row=0, column=4)
enspeak_time_button = tk.Button(
    clock, text="What time is it now?", font=common_font, command=speak_english, width=button_width, height=button_height, bg="#BEBDBE",  # 设置背景颜色为灰色
    highlightbackground="SystemButtonFace"
)
enspeak_time_button.grid(row=0, column=3)

# Rest of the code for the alarm functioNew_English_audioslity (unchanged)

alarm_triggered = False

tran_hour_label = {"中文": "时", "英文": "hour"}
tran_minute_label = {"中文": "分", "英文": "minute"}
tran_set_alarm_button = {"中文": "设置闹钟", "英文": "Set"}
tran_stop_button = {"中文": "停止", "英文": "Stop"}
tran_snooze_alarm = {"中文": "再睡5分钟", "英文": "Snooze"}
current_language = "英文"  # 默认语言设置为英文
pygame.mixer.init()
# 创建一个函数来打开闹钟窗口


def open_alarm_window():
    global alarm_triggered
    alarm = tk.Toplevel(clock)
    alarm.geometry("560x400")
    alarm.title("Alarm Clock 闹钟")

    # 获取主窗口的尺寸
    main_window_width = clock.winfo_width()
    main_window_height = clock.winfo_height()

    # 获取闹钟窗口的尺寸
    alarm_width = 560
    alarm_height = 400

    # 计算闹钟窗口在主窗口中的位置坐标
    x = (main_window_width - alarm_width) // 2
    y = (main_window_height - alarm_height) // 2

    # 设置闹钟窗口的位置
    alarm.geometry(f"560x400+{x}+{y}")

# Create a label to display the background image
    alarm_background_image = tk.Label(alarm, image=alarm_background)
    alarm_background_image.place(x=0, y=0, relwidth=1, relheight=1)
    alarm_background_image.lower()
    # 创建frame
    button_frame = tk.Frame(alarm, width=1, height=1, bg="white")

    slider_frame = tk.Frame(alarm,  width=1, height=1, bg="white")

    slider_frame.place(x=90, y=100)
    button_frame.place(x=320, y=130)

    # 创建用于设置小时的滑块
    translated_hour = tran_hour_label.get(current_language)
    hour_label = tk.Label(slider_frame, font=(
        "Comic Sans MS", 16), text=translated_hour, bg="white")
    hour_label.pack(side="left")
    hour_slider = tk.Scale(slider_frame, from_=0, to=23,
                           length=200, orient="vertical", bg="white")
    hour_slider.pack(side="left")

    # 创建用于设置分钟的滑块
    translated_minute = tran_minute_label.get(current_language)
    minute_label = tk.Label(slider_frame, font=(
        "Comic Sans MS", 16), text=translated_minute, bg="white")
    minute_label.pack(side="right")
    minute_slider = tk.Scale(slider_frame, from_=0,
                             to=59, length=200, orient="vertical", bg="white")
    minute_slider.pack(side="right")

    translated_set_alarm = tran_set_alarm_button.get(current_language)
    set_alarm_button = tk.Button(button_frame, text=translated_set_alarm, font=(
        "Comic Sans MS", 10), bg="white", command=lambda: (set_alarm(), check_alarm()))
    set_alarm_button.pack(side="top", pady=10)

    alarm_status = tk.Label(button_frame, bg="white", text="")
    alarm_status.pack(side="bottom", pady=10)

    def set_alarm():
        global alarm_triggered
        hour = hour_slider.get()
        minute = minute_slider.get()
        tran_alarm_status_label = {
            "中文": f"闹钟设置为：{hour:02d}:{minute:02d}", "英文": f"Alarm：{hour:02d}:{minute:02d}"}
        translated_status = tran_alarm_status_label.get(current_language)
        alarm_status.config(text=translated_status)

    # 定期检查是否触发闹钟
    def check_alarm():
        global alarm_triggered
        tz = pytz.timezone(current_timezone)
        localized_time = datetime.now(tz)
        current_hour = localized_time.strftime("%H")
        current_minute = localized_time.strftime("%M")

        # 从滑块获取所选择的小时和分钟
        selected_hour = hour_slider.get()
        selected_minute = minute_slider.get()

        if current_hour == str(selected_hour) and current_minute == str(selected_minute):
            alarm_triggered = True
            play_alarm()

            # 每一秒后再次检查        # 计算下一秒的开始并等待至下一秒的开始
        next_second = 60 - int(localized_time.strftime("%S"))
        alarm.after(next_second * 1000, check_alarm)

    def play_alarm():
        # 加载并播放闹钟声音
        pygame.mixer.init()
        pygame.mixer.music.load("sound.wav")
        pygame.mixer.music.play()

 # 添加停止按钮
    def stop_alarm():
        global alarm_triggered
        alarm_triggered = False
        pygame.time.delay(1000)
        pygame.mixer.music.stop()

    tran_stop = tran_stop_button.get(current_language)
    stop_button = tk.Button(button_frame, text=tran_stop, font=(
        "Comic Sans MS", 10), command=stop_alarm)
    stop_button.pack(side="left", padx=10, pady=10)

    def snooze_alarm():
        global alarm_triggered
        alarm_triggered = False
        stop_alarm()
        alarm.after(300000, play_alarm)  # 10分钟后再次触发闹钟
    tran_snooze = tran_snooze_alarm.get(current_language)
    snooze_button = tk.Button(button_frame, text=tran_snooze, font=(
        "Comic Sans MS", 10), command=snooze_alarm)
    snooze_button.pack(side="left", padx=10, pady=10)


# 创建一个按钮，用于激活 open_alarm_window() 函数以打开闹钟窗口
alarm_button = tk.Button(clock, image=alarm_image, command=open_alarm_window)
alarm_button.grid(row=0, column=1)

# 创建一个函数来启动Tkinter的主循环


def start_clock():
    clock.mainloop()


# 音乐文件列表
MUSIC_FILES = {
    "彩蝶舞夏": "彩蝶舞夏dancing_butterfly.mp3",
    "Debussy-Arabesque No.1": "Debussy_ArabesqueNo1.mp3",
    "Czerny Op. 740, No. 11": "Czerny_Op740.No11.mp3",
    "Chopin Op.25, No.1": "Chopin_12Etudes,Op.25_No.1.mp3",
    "Franz-Liszt Liebestraum": "Franz-Liszt-Liebestraum.mp3",
}

# 初始化 Pygame
pygame.init()


def open_timer_window():
    timer_window = TimerWindow(clock)

timer_button = Button(clock, image = countdown_image, command=open_timer_window)
timer_button.grid(row=0,column=2)

class TimerWindow(tk.Toplevel):
    def __init__(self, parent):
        super().__init__(parent)
        self.title("Countdown")
        
        self.countdown_label = Label(self, text="00:00", font=("Helvetica", 24))
        self.countdown_label.pack()

        self.time_entry = Entry(self)
        self.time_entry.pack()

        tran_time_unit_label = {"中文":"分/秒","英文":"minutes/seconds"}
        translated_time_unit = tran_time_unit_label.get(current_language)
        self.time_unit_label = Label(self, text=translated_time_unit)
        self.time_unit_label.pack()
        
        min_op = {"中文":"分","英文":"minutes"}
        tran_min = min_op.get(current_language)
        self.time_unit_var = StringVar(self)
        self.time_unit_var.set(tran_min)
        
       
        sec_op = {"中文":"秒","英文":"seconds"}
        tran_sec = sec_op.get(current_language)
        self.time_unit_menu = OptionMenu(self, self.time_unit_var, tran_min, tran_sec)
        self.time_unit_menu.pack()
        
        tran_music_label = {"中文":"选择铃声","英文":"Please select ringtone:"}
        translated_music = tran_music_label.get(current_language)
        self.music_var = StringVar(self)
        self.music_var.set(translated_music)  # 默认提示语
        
        music_label = Label(self, text=translated_music)
        music_label.pack()

        music_menu = OptionMenu(self, self.music_var, *MUSIC_FILES.keys())
        music_menu.pack()

        self.running = False
        self.playing_music = False
        
        tran_start = {"中文":"开始","英文":"set:"}
        translated_start = tran_start.get(current_language)
        self.start_button = Button(self, text=translated_start, command=self.start_countdown)
        self.start_button.pack()
        
        tran_stop = {"中文":"停止","英文":"stop"}
        translated_stop = tran_stop.get(current_language)
        self.stop_button = Button(self, text=translated_stop, command=self.stop_countdown)
        self.stop_button.pack()
        self.stop_button.config(state=tk.DISABLED)  # 初始状态下禁用停止按钮

    def start_countdown(self):
        if not self.running:
            try:
                time_unit = self.time_unit_var.get()
                time_value = int(self.time_entry.get())
                if time_unit == "minutes":
                    countdown_seconds = time_value * 60
                else:  # "seconds"
                    countdown_seconds = time_value

                self.running = True
                self.time_entry.config(state=tk.DISABLED)
                self.time_unit_menu.config(state=tk.DISABLED)
                selected_music = self.music_var.get()
                if selected_music == "Please select ringtone:" or "选择铃声":
                    self.music_var.set("Debussy_ArabesquNo1")  # 如果用户未选择铃声，默认选择一首
                else:
                    self.music_var.set(selected_music)  # 获取所选的铃声

                self.start_button.config(state=tk.DISABLED)  # 禁用开始按钮
                self.stop_button.config(state=tk.NORMAL)  # 启用停止按钮

                countdown_thread = threading.Thread(target=self.run_countdown, args=(countdown_seconds,))
                countdown_thread.start()

            except ValueError:
                self.countdown_label.config(text="Please enter correct time.")

    def run_countdown(self, countdown_seconds):
        for remaining in range(countdown_seconds, -1, -1):
            minutes, seconds = divmod(remaining, 60)
            time_string = f"{minutes:02d}:{seconds:02d}"
            self.countdown_label.config(text=time_string)
            self.update()
            sleep(1)

        self.running = False
        self.time_entry.config(state=tk.NORMAL)
        self.time_unit_menu.config(state=tk.NORMAL)
        self.start_button.config(state=tk.NORMAL)  # 启用开始按钮
        self.stop_button.config(state=tk.NORMAL)  # 启用停止按钮

        selected_music = MUSIC_FILES.get(self.music_var.get())
        if selected_music:
            pygame.mixer.music.load(selected_music)
            pygame.mixer.music.play()
            self.playing_music = True  # 音乐正在播放

    def stop_countdown(self):
        if self.playing_music:
            pygame.mixer.music.stop()
            self.playing_music = False
        self.stop_button.config(state=tk.DISABLED)  # 停止后禁用停止按钮


# 调用 start_clock() 函数启动Tkinter的主循环
start_clock()
